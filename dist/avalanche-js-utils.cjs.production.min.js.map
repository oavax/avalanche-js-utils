{"version":3,"file":"avalanche-js-utils.cjs.production.min.js","sources":["../src/validators.ts","../src/transformers.ts","../src/utils.ts","../src/chain.ts","../src/tools.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module avalanche-utils\n */\n\nexport const isKeyString = (keyString: string, lengh: number): boolean => {\n  return !!keyString.replace('0x', '').match(`^[0-9a-fA-F]{${lengh}}$`);\n};\nisKeyString.validator = 'isKeyString';\n\nexport const isAddress = (address: string): boolean => {\n  return isKeyString(address, 40);\n};\nisAddress.validator = 'isAddress';\n\nexport const isPrivateKey = (privateKey: string): boolean => {\n  return isKeyString(privateKey, 64);\n};\nisPrivateKey.validator = 'isPrivateKey';\n\nexport const isPublicKey = (publicKey: string): boolean => {\n  return isKeyString(publicKey, 66);\n};\nisPublicKey.validator = 'isPublicKey';\n\nexport const isHash = (hash: string): boolean => {\n  return isKeyString(hash, 64);\n};\nisHash.validator = 'isHash';\n\n/**\n * [isNumber verify param is a Number]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isNumber = (obj: any): boolean => {\n  return obj === +obj;\n};\nisNumber.validator = 'isNumber';\n\n/**\n * [isNumber verify param is a Number]\n * @param  {any}  obj [value]\n * @return {boolean}     [boolean]\n */\nexport const isInt = (obj: any): boolean => {\n  return isNumber(obj) && Number.isInteger(obj);\n};\n\nisInt.validator = 'isInt';\n\n/**\n * [isString verify param is a String]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isString = (obj: any): boolean => {\n  return obj === `${obj}`;\n};\n\nisString.validator = 'isString';\n/**\n * [isBoolean verify param is a Boolean]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isBoolean = (obj: any): boolean => {\n  return obj === !!obj;\n};\n\nisBoolean.validator = 'isBoolean';\n/**\n * [isArray verify param input is an Array]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isArray = (obj: any): boolean => {\n  return Array.isArray(obj);\n};\n\nisArray.validator = 'isArray';\n/**\n * [isJson verify param input is a Json]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isJsonString = (obj: any): boolean => {\n  try {\n    return !!JSON.parse(obj) && isObject(JSON.parse(obj));\n  } catch (e) {\n    return false;\n  }\n};\nisJsonString.validator = 'isJsonString';\n\n/**\n * [isObject verify param is an Object]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isObject = (obj: any): boolean => {\n  return obj !== null && !Array.isArray(obj) && typeof obj === 'object';\n};\nisObject.validator = 'isObject';\n\n/**\n * [isFunction verify param is a Function]\n * @param  {any}  obj [value]\n * @return {Boolean}     [description]\n */\n\nexport const isFunction = (obj: any): boolean => {\n  return typeof obj === 'function';\n};\nisFunction.validator = 'isFunction';\n\nexport const isHex = (obj: any): boolean => {\n  if (!isString(obj)) {\n    throw new Error(`${obj} is not string`);\n  }\n  return (\n    (obj.startsWith('0x') || obj.startsWith('-0x')) &&\n    isNumber(Number.parseInt(`${obj}`.toLowerCase().replace('0x', ''), 16))\n  );\n};\n\nisHex.validator = 'isHex';\n\nexport const isHttp = (obj: any): boolean => {\n  if (!isString(obj)) {\n    throw new Error(`${obj} is not valid url`);\n  } else {\n    return obj.startsWith('http://') || obj.startsWith('https://');\n  }\n};\nisHttp.validator = 'isHttp';\n\nexport const isWs = (obj: any): boolean => {\n  if (!isString(obj)) {\n    throw new Error(`${obj} is not valid url`);\n  } else {\n    return obj.startsWith('ws://') || obj.startsWith('wss://');\n  }\n};\nisWs.validator = 'isWs';\n\nexport enum DefaultBlockParams {\n  earliest = 'earliest',\n  pending = 'pending',\n  latest = 'latest',\n}\n\nexport const isBlockNumber = (obj: any): boolean => {\n  const blockParams = [\n    DefaultBlockParams.earliest,\n    DefaultBlockParams.pending,\n    DefaultBlockParams.latest,\n  ];\n\n  if (!isString(obj)) {\n    throw new Error(`${obj} is not valid blockNumber`);\n  }\n\n  return isHex(obj) || blockParams.some((val) => val === obj);\n};\nisBlockNumber.validator = 'isBlockNumber';\n\nexport const isBech32Address = (raw: string): boolean => {\n  return !!raw.match(/^avax1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}/);\n};\nisBech32Address.validator = 'isBech32Address';\n\nexport const isBech32TestNetAddress = (raw: string): boolean => {\n  return !!raw.match(/^tavax1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}/);\n};\nisBech32TestNetAddress.validator = 'isBech32TestNetAddress';\n\nexport const isValidAddress = (address: string): boolean => {\n  if (!isString(address)) {\n    throw new Error(`${address} is not string`);\n  }\n  if (isAddress(address) || isBech32Address(address) || isBech32TestNetAddress(address)) {\n    return true;\n  } else {\n    return false;\n  }\n};\nisValidAddress.validator = 'isValidAddress';\n","/**\n * @packageDocumentation\n * @module avalanche-utils\n */\n\nimport BN from 'bn.js';\nimport { isString, isNumber, isHex } from './validators';\n\nexport enum Units {\n  wei = 'wei',\n  Kwei = 'Kwei',\n  Mwei = 'Mwei',\n  Gwei = 'Gwei',\n  szabo = 'szabo',\n  finney = 'finney',\n  ether = 'ether',\n  avax = 'avax',\n  Kether = 'Kether',\n  Mether = 'Mether',\n  Gether = 'Gether',\n  Tether = 'Tether',\n}\n\n/** @hidden */\nexport const unitMap = new Map([\n  [Units.wei, '1'],\n  [Units.Kwei, '1000'], // 1e3 wei\n  [Units.Mwei, '1000000'], // 1e6 wei\n  [Units.Gwei, '1000000000'], // 1e9 wei\n  [Units.szabo, '1000000000000'], // 1e12 wei\n  [Units.finney, '1000000000000000'], // 1e15 wei\n  [Units.ether, '1000000000000000000'], // 1e18 wei\n  [Units.avax, '1000000000000000000'], // 1e18 wei\n  [Units.Kether, '1000000000000000000000'], // 1e21 wei\n  [Units.Mether, '1000000000000000000000000'], // 1e24 wei\n  [Units.Gether, '1000000000000000000000000000'], // 1e27 wei\n  [Units.Tether, '1000000000000000000000000000000'], // 1e30 wei\n]);\n\n/** @hidden */\nconst DEFAULT_OPTIONS = {\n  pad: false,\n};\n\n/**\n * Convert Number to String\n */\nexport const numberToString = (obj: BN | number | string, radix: number = 10): string => {\n  if (BN.isBN(obj)) {\n    return obj.toString(radix);\n  } else if (isNumber(obj)) {\n    return new BN(obj).toString(radix);\n  } else if (isString(obj) && isNumber(Number(obj))) {\n    return new BN(obj).toString(radix);\n  } else {\n    throw new Error(`cannot parse number:${obj} to string`);\n  }\n};\n\n/**\n * Convert Number to String\n */\nexport const numToStr = (input: any) => {\n  if (typeof input === 'string') {\n    if (!input.match(/^-?[0-9.]+$/)) {\n      throw new Error(\n        `while converting number to string, invalid number value '${input}', should be a number matching (^-?[0-9.]+).`,\n      );\n    }\n    return input;\n  } else if (typeof input === 'number') {\n    return String(input);\n  } else if (BN.isBN(input)) {\n    return input.toString(10);\n  }\n\n  throw new Error(\n    `while converting number to string, invalid number value '${input}' type ${typeof input}.`,\n  );\n};\n\nexport const add0xToString = (obj: string): string => {\n  if (isString(obj) && !obj.startsWith('-')) {\n    return '0x' + obj.replace('0x', '');\n  } else if (isString(obj) && obj.startsWith('-')) {\n    return '-0x' + obj.replace('-', '');\n  } else {\n    throw new Error(`${obj} is not String`);\n  }\n};\n\nexport const strip0x = (obj: string): string => {\n  return obj.toLowerCase().replace('0x', '');\n};\n\n/**\n * Convert number to hex\n */\nexport const numberToHex = (obj: any): string => {\n  try {\n    return add0xToString(numberToString(obj, 16));\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Convert hex to Decimal number\n */\nexport const hexToNumber = (hex: string): string => {\n  if (isHex(hex) && hex[0] !== '-') {\n    return new BN(strip0x(hex), 'hex').toString();\n  } else if (isHex(hex) && hex[0] === '-') {\n    const result: BN = new BN(hex.substring(3), 16);\n    return result.mul(new BN(-1)).toString();\n  } else {\n    throw new Error(`${hex} is not hex number`);\n  }\n};\n\n/**\n * Convert hex to Big Number\n */\nexport const hexToBN = (hex: string): BN => {\n  if (isHex(hex) && hex[0] !== '-') {\n    return new BN(strip0x(hex), 'hex');\n  } else if (isHex(hex) && hex[0] === '-') {\n    const result: BN = new BN(hex.substring(3), 16);\n    return result.mul(new BN(-1));\n  } else {\n    throw new Error(`${hex} is not hex number`);\n  }\n};\n\n/**\n * Converts any AVAX value into wei\n */\nexport const toWei = (input: BN | string, unit: Units): BN => {\n  try {\n    let inputStr = numToStr(input);\n    const baseStr = unitMap.get(unit);\n\n    if (!baseStr) {\n      throw new Error(`No unit of type ${unit} exists.`);\n    }\n\n    const baseNumDecimals = baseStr.length - 1;\n    const base = new BN(baseStr, 10);\n\n    // Is it negative?\n    const isNegative = inputStr.substring(0, 1) === '-';\n    if (isNegative) {\n      inputStr = inputStr.substring(1);\n    }\n\n    if (inputStr === '.') {\n      throw new Error(`Cannot convert ${inputStr} to wei.`);\n    }\n\n    // Split it into a whole and fractional part\n    const comps = inputStr.split('.'); // eslint-disable-line\n    if (comps.length > 2) {\n      throw new Error(`Cannot convert ${inputStr} to wei.`);\n    }\n\n    let [whole, fraction] = comps;\n\n    if (!whole) {\n      whole = '0';\n    }\n    if (!fraction) {\n      fraction = '0';\n    }\n    if (fraction.length > baseNumDecimals) {\n      throw new Error(`Cannot convert ${inputStr} to wei.`);\n    }\n\n    while (fraction.length < baseNumDecimals) {\n      fraction += '0';\n    }\n\n    const wholeBN = new BN(whole);\n    const fractionBN = new BN(fraction);\n    let wei = wholeBN.mul(base).add(fractionBN);\n\n    if (isNegative) {\n      wei = wei.neg();\n    }\n\n    return new BN(wei.toString(10), 10);\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Converts any wei value into a AVAX value.\n */\nexport const fromWei = (wei: BN | string, unit: Units, options: any = DEFAULT_OPTIONS): string => {\n  try {\n    const weiBN: BN = !BN.isBN(wei) ? new BN(wei) : wei;\n\n    if (unit === 'wei') {\n      return weiBN.toString(10);\n    }\n\n    const baseStr = unitMap.get(unit);\n\n    if (!baseStr) {\n      throw new Error(`No unit of type ${unit} exists.`);\n    }\n\n    const base = new BN(baseStr, 10);\n    const baseNumDecimals = baseStr.length - 1;\n\n    let fraction = weiBN\n      .abs()\n      .mod(base)\n      .toString(10);\n\n    // prepend 0s to the fraction half\n    while (fraction.length < baseNumDecimals) {\n      fraction = `0${fraction}`;\n    }\n\n    if (!options.pad) {\n      /* eslint-disable prefer-destructuring */\n      const matchFraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/);\n      fraction = matchFraction ? matchFraction[1] : '0';\n    }\n\n    const whole = weiBN.div(base).toString(10);\n\n    return fraction === '0' ? `${whole}` : `${whole}.${fraction}`;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport class Unit {\n  static from(str: BN | string) {\n    return new Unit(str);\n  }\n\n  static Wei(str: BN | string) {\n    return new Unit(str).asWei();\n  }\n  static Kwei(str: BN | string) {\n    return new Unit(str).asKwei();\n  }\n  static Mwei(str: BN | string) {\n    return new Unit(str).asMwei();\n  }\n  static Gwei(str: BN | string) {\n    return new Unit(str).asGwei();\n  }\n  static Szabo(str: BN | string) {\n    return new Unit(str).asSzabo();\n  }\n  static Finney(str: BN | string) {\n    return new Unit(str).asFinney();\n  }\n  static Ether(str: BN | string) {\n    return new Unit(str).asEther();\n  }\n  static AVAX(str: BN | string) {\n    return new Unit(str).asAVAX();\n  }\n  static Kether(str: BN | string) {\n    return new Unit(str).asKether();\n  }\n  static Mether(str: BN | string) {\n    return new Unit(str).asMether();\n  }\n  static Gether(str: BN | string) {\n    return new Unit(str).asGether();\n  }\n  static Tether(str: BN | string) {\n    return new Unit(str).asTether();\n  }\n\n  wei: BN;\n  unit: BN | string;\n\n  constructor(str: BN | string | number) {\n    if (!BN.isBN(str) && typeof str !== 'number' && isHex(str)) {\n      this.unit = hexToNumber(str);\n    } else if (!BN.isBN(str) && typeof str === 'number') {\n      this.unit = str.toString();\n    } else if (str === '0x') {\n      this.unit = hexToNumber('0x0');\n    } else {\n      this.unit = str;\n    }\n\n    this.wei = new BN(this.unit);\n  }\n\n  asWei() {\n    this.wei = new BN(this.unit);\n    return this;\n  }\n  asKwei() {\n    this.wei = toWei(this.unit, Units.Kwei);\n    return this;\n  }\n  asMwei() {\n    this.wei = toWei(this.unit, Units.Mwei);\n    return this;\n  }\n  asGwei() {\n    this.wei = toWei(this.unit, Units.Gwei);\n    return this;\n  }\n  asSzabo() {\n    this.wei = toWei(this.unit, Units.szabo);\n    return this;\n  }\n  asFinney() {\n    this.wei = toWei(this.unit, Units.finney);\n    return this;\n  }\n  asEther() {\n    this.wei = toWei(this.unit, Units.ether);\n    return this;\n  }\n  asAVAX() {\n    this.wei = toWei(this.unit, Units.avax);\n    return this;\n  }\n  asKether() {\n    this.wei = toWei(this.unit, Units.Kether);\n    return this;\n  }\n  asMether() {\n    this.wei = toWei(this.unit, Units.Mether);\n    return this;\n  }\n  asGether() {\n    this.wei = toWei(this.unit, Units.Gether);\n    return this;\n  }\n  asTether() {\n    this.wei = toWei(this.unit, Units.Tether);\n    return this;\n  }\n\n  toWei() {\n    if (this.wei) {\n      return this.wei;\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n\n  toKwei() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Kwei);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toGwei() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Gwei);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toMwei() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Mwei);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toSzabo() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.szabo);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toFinney() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.finney);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toEther() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.ether);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toAVAX() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.avax);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toKether() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Kether);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toMether() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Mether);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toGether() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Gether);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toTether() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Tether);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n\n  toWeiString() {\n    if (this.wei) {\n      return this.wei.toString();\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toHex() {\n    if (this.wei) {\n      return numberToHex(this.wei);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-utils\n */\n\nimport {\n  isNumber,\n  isString,\n  isBoolean,\n  isArray,\n  isJsonString,\n  isHex,\n  isObject,\n  isFunction,\n  isPublicKey,\n  isPrivateKey,\n  isAddress,\n  isBech32Address,\n  isBech32TestNetAddress,\n  isValidAddress,\n  isHash,\n  isBlockNumber,\n} from './validators';\n\n/** @hidden */\nexport enum AssertType {\n  required = 'required',\n  optional = 'optional',\n}\n\n/** @hidden */\nexport const validatorArray: any = {\n  isNumber: [isNumber],\n  isString: [isString],\n  isBoolean: [isBoolean],\n  isArray: [isArray],\n  isJsonString: [isJsonString],\n  isObject: [isObject],\n  isFunction: [isFunction],\n  isHex: [isHex],\n  isPublicKey: [isPublicKey],\n  isPrivateKey: [isPrivateKey],\n  isAddress: [isAddress],\n  isHash: [isHash],\n  isBlockNumber: [isBlockNumber],\n  isBech32Address: [isBech32Address],\n  isBech32TestNetAddress: [isBech32TestNetAddress],\n  isValidAddress: [isValidAddress],\n};\n\nexport function validateArgs(args: any, requiredArgs: any, optionalArgs: any): boolean {\n  for (const key in requiredArgs) {\n    if (args[key] !== undefined) {\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < requiredArgs[key].length; i += 1) {\n        if (typeof requiredArgs[key][i] !== 'function') {\n          throw new Error('Validator is not a function');\n        }\n\n        if (!requiredArgs[key][i](args[key])) {\n          throw new Error(\n            `Validation failed for ${key},should be validated by ${requiredArgs[key][i].validator}`,\n          );\n        }\n      }\n    } else {\n      throw new Error(`Key not found: ${key}`);\n    }\n  }\n\n  for (const key in optionalArgs) {\n    if (args[key]) {\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < optionalArgs[key].length; i += 1) {\n        if (typeof optionalArgs[key][i] !== 'function') {\n          throw new Error('Validator is not a function');\n        }\n\n        if (!optionalArgs[key][i](args[key])) {\n          throw new Error(\n            `Validation failed for ${key},should be validated by ${optionalArgs[key][i].validator}`,\n          );\n        }\n      }\n    }\n  }\n  return true;\n}\n\nexport function generateValidateObjects(validatorObject: { [x: string]: any[] }) {\n  const requiredArgs: any = {};\n  const optionalArgs: any = {};\n  for (const index in validatorObject) {\n    if (index !== undefined) {\n      const newObjectKey = index;\n      const newObjectValid = validatorObject[index][0];\n      const isRequired = validatorObject[index][1];\n      if (isRequired === AssertType.required) {\n        requiredArgs[newObjectKey] = validatorArray[newObjectValid];\n      } else {\n        optionalArgs[newObjectKey] = validatorArray[newObjectValid];\n      }\n    }\n  }\n  return { requiredArgs, optionalArgs };\n}\n\nconst assertObject = (input: any) => (target: any, key: any, descriptor: PropertyDescriptor) => {\n  const { requiredArgs, optionalArgs } = generateValidateObjects(input);\n  const original = descriptor.value;\n  function interceptor(this: any, ...args: any[]) {\n    validateArgs(args[0], requiredArgs, optionalArgs);\n    return original.apply(this, args);\n  }\n  descriptor.value = interceptor;\n  return descriptor;\n};\n\nexport { assertObject };\n","/**\n # avalanche-js-utils\n\nThis package provides a collection of utility apis for unit conversions like `fromWei`, `toWei`, `hexToNumber`, `numberToHex`, `isAddress`, etc.\n\n## Installation\n\n```\nnpm install avalanche-js-utils\n```\n\n## Usage\n\nAvailable units\n```\nconst { Units } = require('avalanche-js-utils');\n\n[Units.wei, '1'], // 1 wei\n[Units.Kwei, '1000'], // 1e3 wei\n[Units.Mwei, '1000000'], // 1e6 wei\n[Units.Gwei, '1000000000'], // 1e9 wei\n[Units.szabo, '1000000000000'], // 1e12 wei\n[Units.finney, '1000000000000000'], // 1e15 wei\n[Units.ether, '1000000000000000000'], // 1e18 wei\n[Units.avax, '1000000000000000000'], // 1e18 wei\n[Units.Kether, '1000000000000000000000'], // 1e21 wei\n[Units.Mether, '1000000000000000000000000'], // 1e24 wei\n[Units.Gether, '1000000000000000000000000000'], // 1e27 wei\n[Units.Tether, '1000000000000000000000000000000'], // 1e30 wei\n```\n\nConverting between different units\n```javascript\nconst { Units, Unit, numberToString, add0xToString, fromWei, toWei, numToStr} = require('avalanche-js-utils');\nconst { BN } = require('avalanche-js-crypto');\n\nconst avax = new Unit('1').asAVAX();\nconst avaxToGwei = avax.toGwei();\nconsole.log(avaxToGwei);\n\n// numberToString\nconst num = 123;\nconst str = numberToString(num)\nconsole.log(str);\n\n// add0xToString\nconst str = '12345';\nconst expected = add0xToString(str)\nconsole.log(expected);\n\n// fromWei\nconst Wei = new BN('1000000000000000000');\nconst expected = fromWei(Wei, Units.avax);\nconsole.log(expected);\n\n// toWei\nconst avax = new BN('1');\nconst expected = toWei(avax, hmy.utils.Units.avax);\nconst num = numToStr(expected);\nconsole.log(num);\n```\n *\n * @packageDocumentation\n * @module avalanche-utils\n */\n\nexport enum ChainType {\n  Avalanche = 'hmy',\n  Ethereum = 'eth',\n}\n\nexport enum ChainID {\n  Default = 0,\n  EthMainnet = 1,\n  Morden = 2,\n  Ropsten = 3,\n  Rinkeby = 4,\n  RootstockMainnet = 30,\n  RootstockTestnet = 31,\n  Kovan = 42,\n  EtcMainnet = 61,\n  EtcTestnet = 62,\n  Geth = 1337,\n  Ganache = 0,\n  HmyMainnet = 1,\n  HmyTestnet = 2,\n  HmyLocal = 2,\n  HmyPangaea = 3,\n}\n\n/** @hidden */\nexport const defaultConfig = {\n  Default: {\n    Chain_ID: ChainID.HmyLocal,\n    Chain_Type: ChainType.Avalanche,\n    Chain_URL: 'http://localhost:9500',\n    Network_ID: 'Local',\n  },\n  DefaultWS: {\n    Chain_ID: ChainID.HmyLocal,\n    Chain_Type: ChainType.Avalanche,\n    Chain_URL: 'ws://localhost:9800',\n    Network_ID: 'LocalWS',\n  },\n};\n\n/** @hidden */\nexport abstract class AvalancheCore {\n  chainType: ChainType;\n  chainId: ChainID;\n  constructor(chainType: ChainType, chainId: ChainID = defaultConfig.Default.Chain_ID) {\n    this.chainType = chainType;\n    this.chainId = chainId;\n  }\n  get chainPrefix(): string {\n    switch (this.chainType) {\n      case ChainType.Ethereum: {\n        return 'eth';\n      }\n      case ChainType.Avalanche: {\n        return 'hmy';\n      }\n      default: {\n        return 'hmy';\n      }\n    }\n  }\n  get getChainId(): ChainID {\n    return this.chainId;\n  }\n  public setChainId(chainId: ChainID) {\n    this.chainId = chainId;\n  }\n  public setChainType(chainType: ChainType) {\n    this.chainType = chainType;\n  }\n}\n\n/** @hidden */\nexport const HDPath = `m/44'/1023'/0'/0/`;\n\n/** @hidden */\nexport const AddressSuffix = '-';\n","/**\n * @packageDocumentation\n * @module avalanche-utils\n * @hidden\n */\n\nexport function defineReadOnly(object: any, name: string, value: any): void {\n  Object.defineProperty(object, name, {\n    enumerable: true,\n    value,\n    writable: false,\n  });\n}\n"],"names":["isKeyString","keyString","lengh","replace","match","validator","isAddress","address","isPrivateKey","privateKey","isPublicKey","publicKey","isHash","hash","isNumber","obj","isInt","Number","isInteger","isString","isBoolean","isArray","Array","isJsonString","JSON","parse","isObject","e","isFunction","isHex","Error","startsWith","parseInt","toLowerCase","isHttp","DefaultBlockParams","isWs","isBlockNumber","blockParams","earliest","pending","latest","some","val","isBech32Address","raw","isBech32TestNetAddress","Units","isValidAddress","AssertType","unitMap","Map","wei","Kwei","Mwei","Gwei","szabo","finney","ether","avax","Kether","Mether","Gether","Tether","DEFAULT_OPTIONS","pad","numberToString","radix","BN","isBN","toString","numToStr","input","String","add0xToString","strip0x","numberToHex","error","hexToNumber","hex","substring","mul","toWei","unit","inputStr","baseStr","get","baseNumDecimals","length","base","isNegative","comps","split","whole","fraction","wholeBN","fractionBN","add","neg","fromWei","options","weiBN","abs","mod","matchFraction","div","Unit","str","this","from","Wei","asWei","asKwei","asMwei","asGwei","Szabo","asSzabo","Finney","asFinney","Ether","asEther","AVAX","asAVAX","asKether","asMether","asGether","asTether","toKwei","toGwei","toMwei","toSzabo","toFinney","toEther","toAVAX","toKether","toMether","toGether","toTether","toWeiString","toHex","ChainType","ChainID","validatorArray","validateArgs","args","requiredArgs","optionalArgs","key","undefined","i","generateValidateObjects","validatorObject","index","newObjectKey","newObjectValid","required","defaultConfig","Default","Chain_ID","HmyLocal","Chain_Type","Avalanche","Chain_URL","Network_ID","DefaultWS","AvalancheCore","chainType","chainId","setChainId","setChainType","Ethereum","target","descriptor","original","value","apply","object","name","Object","defineProperty","enumerable","writable"],"mappings":"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"}