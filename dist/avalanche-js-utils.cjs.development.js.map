{"version":3,"file":"avalanche-js-utils.cjs.development.js","sources":["../src/validators.ts","../src/transformers.ts","../src/utils.ts","../src/chain.ts","../src/tools.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module avalanche-utils\n */\n\nexport const isKeyString = (keyString: string, lengh: number): boolean => {\n  return !!keyString.replace('0x', '').match(`^[0-9a-fA-F]{${lengh}}$`);\n};\nisKeyString.validator = 'isKeyString';\n\nexport const isAddress = (address: string): boolean => {\n  return isKeyString(address, 40);\n};\nisAddress.validator = 'isAddress';\n\nexport const isPrivateKey = (privateKey: string): boolean => {\n  return isKeyString(privateKey, 64);\n};\nisPrivateKey.validator = 'isPrivateKey';\n\nexport const isPublicKey = (publicKey: string): boolean => {\n  return isKeyString(publicKey, 66);\n};\nisPublicKey.validator = 'isPublicKey';\n\nexport const isHash = (hash: string): boolean => {\n  return isKeyString(hash, 64);\n};\nisHash.validator = 'isHash';\n\n/**\n * [isNumber verify param is a Number]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isNumber = (obj: any): boolean => {\n  return obj === +obj;\n};\nisNumber.validator = 'isNumber';\n\n/**\n * [isNumber verify param is a Number]\n * @param  {any}  obj [value]\n * @return {boolean}     [boolean]\n */\nexport const isInt = (obj: any): boolean => {\n  return isNumber(obj) && Number.isInteger(obj);\n};\n\nisInt.validator = 'isInt';\n\n/**\n * [isString verify param is a String]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isString = (obj: any): boolean => {\n  return obj === `${obj}`;\n};\n\nisString.validator = 'isString';\n/**\n * [isBoolean verify param is a Boolean]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isBoolean = (obj: any): boolean => {\n  return obj === !!obj;\n};\n\nisBoolean.validator = 'isBoolean';\n/**\n * [isArray verify param input is an Array]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isArray = (obj: any): boolean => {\n  return Array.isArray(obj);\n};\n\nisArray.validator = 'isArray';\n/**\n * [isJson verify param input is a Json]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isJsonString = (obj: any): boolean => {\n  try {\n    return !!JSON.parse(obj) && isObject(JSON.parse(obj));\n  } catch (e) {\n    return false;\n  }\n};\nisJsonString.validator = 'isJsonString';\n\n/**\n * [isObject verify param is an Object]\n * @param  {any}  obj [value]\n * @return {Boolean}     [boolean]\n */\nexport const isObject = (obj: any): boolean => {\n  return obj !== null && !Array.isArray(obj) && typeof obj === 'object';\n};\nisObject.validator = 'isObject';\n\n/**\n * [isFunction verify param is a Function]\n * @param  {any}  obj [value]\n * @return {Boolean}     [description]\n */\n\nexport const isFunction = (obj: any): boolean => {\n  return typeof obj === 'function';\n};\nisFunction.validator = 'isFunction';\n\nexport const isHex = (obj: any): boolean => {\n  if (!isString(obj)) {\n    throw new Error(`${obj} is not string`);\n  }\n  return (\n    (obj.startsWith('0x') || obj.startsWith('-0x')) &&\n    isNumber(Number.parseInt(`${obj}`.toLowerCase().replace('0x', ''), 16))\n  );\n};\n\nisHex.validator = 'isHex';\n\nexport const isHttp = (obj: any): boolean => {\n  if (!isString(obj)) {\n    throw new Error(`${obj} is not valid url`);\n  } else {\n    return obj.startsWith('http://') || obj.startsWith('https://');\n  }\n};\nisHttp.validator = 'isHttp';\n\nexport const isWs = (obj: any): boolean => {\n  if (!isString(obj)) {\n    throw new Error(`${obj} is not valid url`);\n  } else {\n    return obj.startsWith('ws://') || obj.startsWith('wss://');\n  }\n};\nisWs.validator = 'isWs';\n\nexport enum DefaultBlockParams {\n  earliest = 'earliest',\n  pending = 'pending',\n  latest = 'latest',\n}\n\nexport const isBlockNumber = (obj: any): boolean => {\n  const blockParams = [\n    DefaultBlockParams.earliest,\n    DefaultBlockParams.pending,\n    DefaultBlockParams.latest,\n  ];\n\n  if (!isString(obj)) {\n    throw new Error(`${obj} is not valid blockNumber`);\n  }\n\n  return isHex(obj) || blockParams.some((val) => val === obj);\n};\nisBlockNumber.validator = 'isBlockNumber';\n\nexport const isBech32Address = (raw: string): boolean => {\n  return !!raw.match(/^avax1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}/);\n};\nisBech32Address.validator = 'isBech32Address';\n\nexport const isBech32TestNetAddress = (raw: string): boolean => {\n  return !!raw.match(/^tavax1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}/);\n};\nisBech32TestNetAddress.validator = 'isBech32TestNetAddress';\n\nexport const isValidAddress = (address: string): boolean => {\n  if (!isString(address)) {\n    throw new Error(`${address} is not string`);\n  }\n  if (isAddress(address) || isBech32Address(address) || isBech32TestNetAddress(address)) {\n    return true;\n  } else {\n    return false;\n  }\n};\nisValidAddress.validator = 'isValidAddress';\n","/**\n * @packageDocumentation\n * @module avalanche-utils\n */\n\nimport BN from 'bn.js';\nimport { isString, isNumber, isHex } from './validators';\n\nexport enum Units {\n  wei = 'wei',\n  Kwei = 'Kwei',\n  Mwei = 'Mwei',\n  Gwei = 'Gwei',\n  szabo = 'szabo',\n  finney = 'finney',\n  ether = 'ether',\n  avax = 'avax',\n  Kether = 'Kether',\n  Mether = 'Mether',\n  Gether = 'Gether',\n  Tether = 'Tether',\n}\n\n/** @hidden */\nexport const unitMap = new Map([\n  [Units.wei, '1'],\n  [Units.Kwei, '1000'], // 1e3 wei\n  [Units.Mwei, '1000000'], // 1e6 wei\n  [Units.Gwei, '1000000000'], // 1e9 wei\n  [Units.szabo, '1000000000000'], // 1e12 wei\n  [Units.finney, '1000000000000000'], // 1e15 wei\n  [Units.ether, '1000000000000000000'], // 1e18 wei\n  [Units.avax, '1000000000000000000'], // 1e18 wei\n  [Units.Kether, '1000000000000000000000'], // 1e21 wei\n  [Units.Mether, '1000000000000000000000000'], // 1e24 wei\n  [Units.Gether, '1000000000000000000000000000'], // 1e27 wei\n  [Units.Tether, '1000000000000000000000000000000'], // 1e30 wei\n]);\n\n/** @hidden */\nconst DEFAULT_OPTIONS = {\n  pad: false,\n};\n\n/**\n * Convert Number to String\n */\nexport const numberToString = (obj: BN | number | string, radix: number = 10): string => {\n  if (BN.isBN(obj)) {\n    return obj.toString(radix);\n  } else if (isNumber(obj)) {\n    return new BN(obj).toString(radix);\n  } else if (isString(obj) && isNumber(Number(obj))) {\n    return new BN(obj).toString(radix);\n  } else {\n    throw new Error(`cannot parse number:${obj} to string`);\n  }\n};\n\n/**\n * Convert Number to String\n */\nexport const numToStr = (input: any) => {\n  if (typeof input === 'string') {\n    if (!input.match(/^-?[0-9.]+$/)) {\n      throw new Error(\n        `while converting number to string, invalid number value '${input}', should be a number matching (^-?[0-9.]+).`,\n      );\n    }\n    return input;\n  } else if (typeof input === 'number') {\n    return String(input);\n  } else if (BN.isBN(input)) {\n    return input.toString(10);\n  }\n\n  throw new Error(\n    `while converting number to string, invalid number value '${input}' type ${typeof input}.`,\n  );\n};\n\nexport const add0xToString = (obj: string): string => {\n  if (isString(obj) && !obj.startsWith('-')) {\n    return '0x' + obj.replace('0x', '');\n  } else if (isString(obj) && obj.startsWith('-')) {\n    return '-0x' + obj.replace('-', '');\n  } else {\n    throw new Error(`${obj} is not String`);\n  }\n};\n\nexport const strip0x = (obj: string): string => {\n  return obj.toLowerCase().replace('0x', '');\n};\n\n/**\n * Convert number to hex\n */\nexport const numberToHex = (obj: any): string => {\n  try {\n    return add0xToString(numberToString(obj, 16));\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Convert hex to Decimal number\n */\nexport const hexToNumber = (hex: string): string => {\n  if (isHex(hex) && hex[0] !== '-') {\n    return new BN(strip0x(hex), 'hex').toString();\n  } else if (isHex(hex) && hex[0] === '-') {\n    const result: BN = new BN(hex.substring(3), 16);\n    return result.mul(new BN(-1)).toString();\n  } else {\n    throw new Error(`${hex} is not hex number`);\n  }\n};\n\n/**\n * Convert hex to Big Number\n */\nexport const hexToBN = (hex: string): BN => {\n  if (isHex(hex) && hex[0] !== '-') {\n    return new BN(strip0x(hex), 'hex');\n  } else if (isHex(hex) && hex[0] === '-') {\n    const result: BN = new BN(hex.substring(3), 16);\n    return result.mul(new BN(-1));\n  } else {\n    throw new Error(`${hex} is not hex number`);\n  }\n};\n\n/**\n * Converts any AVAX value into wei\n */\nexport const toWei = (input: BN | string, unit: Units): BN => {\n  try {\n    let inputStr = numToStr(input);\n    const baseStr = unitMap.get(unit);\n\n    if (!baseStr) {\n      throw new Error(`No unit of type ${unit} exists.`);\n    }\n\n    const baseNumDecimals = baseStr.length - 1;\n    const base = new BN(baseStr, 10);\n\n    // Is it negative?\n    const isNegative = inputStr.substring(0, 1) === '-';\n    if (isNegative) {\n      inputStr = inputStr.substring(1);\n    }\n\n    if (inputStr === '.') {\n      throw new Error(`Cannot convert ${inputStr} to wei.`);\n    }\n\n    // Split it into a whole and fractional part\n    const comps = inputStr.split('.'); // eslint-disable-line\n    if (comps.length > 2) {\n      throw new Error(`Cannot convert ${inputStr} to wei.`);\n    }\n\n    let [whole, fraction] = comps;\n\n    if (!whole) {\n      whole = '0';\n    }\n    if (!fraction) {\n      fraction = '0';\n    }\n    if (fraction.length > baseNumDecimals) {\n      throw new Error(`Cannot convert ${inputStr} to wei.`);\n    }\n\n    while (fraction.length < baseNumDecimals) {\n      fraction += '0';\n    }\n\n    const wholeBN = new BN(whole);\n    const fractionBN = new BN(fraction);\n    let wei = wholeBN.mul(base).add(fractionBN);\n\n    if (isNegative) {\n      wei = wei.neg();\n    }\n\n    return new BN(wei.toString(10), 10);\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * Converts any wei value into a AVAX value.\n */\nexport const fromWei = (wei: BN | string, unit: Units, options: any = DEFAULT_OPTIONS): string => {\n  try {\n    const weiBN: BN = !BN.isBN(wei) ? new BN(wei) : wei;\n\n    if (unit === 'wei') {\n      return weiBN.toString(10);\n    }\n\n    const baseStr = unitMap.get(unit);\n\n    if (!baseStr) {\n      throw new Error(`No unit of type ${unit} exists.`);\n    }\n\n    const base = new BN(baseStr, 10);\n    const baseNumDecimals = baseStr.length - 1;\n\n    let fraction = weiBN\n      .abs()\n      .mod(base)\n      .toString(10);\n\n    // prepend 0s to the fraction half\n    while (fraction.length < baseNumDecimals) {\n      fraction = `0${fraction}`;\n    }\n\n    if (!options.pad) {\n      /* eslint-disable prefer-destructuring */\n      const matchFraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/);\n      fraction = matchFraction ? matchFraction[1] : '0';\n    }\n\n    const whole = weiBN.div(base).toString(10);\n\n    return fraction === '0' ? `${whole}` : `${whole}.${fraction}`;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport class Unit {\n  static from(str: BN | string) {\n    return new Unit(str);\n  }\n\n  static Wei(str: BN | string) {\n    return new Unit(str).asWei();\n  }\n  static Kwei(str: BN | string) {\n    return new Unit(str).asKwei();\n  }\n  static Mwei(str: BN | string) {\n    return new Unit(str).asMwei();\n  }\n  static Gwei(str: BN | string) {\n    return new Unit(str).asGwei();\n  }\n  static Szabo(str: BN | string) {\n    return new Unit(str).asSzabo();\n  }\n  static Finney(str: BN | string) {\n    return new Unit(str).asFinney();\n  }\n  static Ether(str: BN | string) {\n    return new Unit(str).asEther();\n  }\n  static AVAX(str: BN | string) {\n    return new Unit(str).asAVAX();\n  }\n  static Kether(str: BN | string) {\n    return new Unit(str).asKether();\n  }\n  static Mether(str: BN | string) {\n    return new Unit(str).asMether();\n  }\n  static Gether(str: BN | string) {\n    return new Unit(str).asGether();\n  }\n  static Tether(str: BN | string) {\n    return new Unit(str).asTether();\n  }\n\n  wei: BN;\n  unit: BN | string;\n\n  constructor(str: BN | string | number) {\n    if (!BN.isBN(str) && typeof str !== 'number' && isHex(str)) {\n      this.unit = hexToNumber(str);\n    } else if (!BN.isBN(str) && typeof str === 'number') {\n      this.unit = str.toString();\n    } else if (str === '0x') {\n      this.unit = hexToNumber('0x0');\n    } else {\n      this.unit = str;\n    }\n\n    this.wei = new BN(this.unit);\n  }\n\n  asWei() {\n    this.wei = new BN(this.unit);\n    return this;\n  }\n  asKwei() {\n    this.wei = toWei(this.unit, Units.Kwei);\n    return this;\n  }\n  asMwei() {\n    this.wei = toWei(this.unit, Units.Mwei);\n    return this;\n  }\n  asGwei() {\n    this.wei = toWei(this.unit, Units.Gwei);\n    return this;\n  }\n  asSzabo() {\n    this.wei = toWei(this.unit, Units.szabo);\n    return this;\n  }\n  asFinney() {\n    this.wei = toWei(this.unit, Units.finney);\n    return this;\n  }\n  asEther() {\n    this.wei = toWei(this.unit, Units.ether);\n    return this;\n  }\n  asAVAX() {\n    this.wei = toWei(this.unit, Units.avax);\n    return this;\n  }\n  asKether() {\n    this.wei = toWei(this.unit, Units.Kether);\n    return this;\n  }\n  asMether() {\n    this.wei = toWei(this.unit, Units.Mether);\n    return this;\n  }\n  asGether() {\n    this.wei = toWei(this.unit, Units.Gether);\n    return this;\n  }\n  asTether() {\n    this.wei = toWei(this.unit, Units.Tether);\n    return this;\n  }\n\n  toWei() {\n    if (this.wei) {\n      return this.wei;\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n\n  toKwei() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Kwei);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toGwei() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Gwei);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toMwei() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Mwei);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toSzabo() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.szabo);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toFinney() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.finney);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toEther() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.ether);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toAVAX() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.avax);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toKether() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Kether);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toMether() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Mether);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toGether() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Gether);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toTether() {\n    if (this.wei) {\n      return fromWei(this.wei, Units.Tether);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n\n  toWeiString() {\n    if (this.wei) {\n      return this.wei.toString();\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n  toHex() {\n    if (this.wei) {\n      return numberToHex(this.wei);\n    } else {\n      throw new Error('error transforming');\n    }\n  }\n}\n","/**\n * @packageDocumentation\n * @module avalanche-utils\n */\n\nimport {\n  isNumber,\n  isString,\n  isBoolean,\n  isArray,\n  isJsonString,\n  isHex,\n  isObject,\n  isFunction,\n  isPublicKey,\n  isPrivateKey,\n  isAddress,\n  isBech32Address,\n  isBech32TestNetAddress,\n  isValidAddress,\n  isHash,\n  isBlockNumber,\n} from './validators';\n\n/** @hidden */\nexport enum AssertType {\n  required = 'required',\n  optional = 'optional',\n}\n\n/** @hidden */\nexport const validatorArray: any = {\n  isNumber: [isNumber],\n  isString: [isString],\n  isBoolean: [isBoolean],\n  isArray: [isArray],\n  isJsonString: [isJsonString],\n  isObject: [isObject],\n  isFunction: [isFunction],\n  isHex: [isHex],\n  isPublicKey: [isPublicKey],\n  isPrivateKey: [isPrivateKey],\n  isAddress: [isAddress],\n  isHash: [isHash],\n  isBlockNumber: [isBlockNumber],\n  isBech32Address: [isBech32Address],\n  isBech32TestNetAddress: [isBech32TestNetAddress],\n  isValidAddress: [isValidAddress],\n};\n\nexport function validateArgs(args: any, requiredArgs: any, optionalArgs: any): boolean {\n  for (const key in requiredArgs) {\n    if (args[key] !== undefined) {\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < requiredArgs[key].length; i += 1) {\n        if (typeof requiredArgs[key][i] !== 'function') {\n          throw new Error('Validator is not a function');\n        }\n\n        if (!requiredArgs[key][i](args[key])) {\n          throw new Error(\n            `Validation failed for ${key},should be validated by ${requiredArgs[key][i].validator}`,\n          );\n        }\n      }\n    } else {\n      throw new Error(`Key not found: ${key}`);\n    }\n  }\n\n  for (const key in optionalArgs) {\n    if (args[key]) {\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < optionalArgs[key].length; i += 1) {\n        if (typeof optionalArgs[key][i] !== 'function') {\n          throw new Error('Validator is not a function');\n        }\n\n        if (!optionalArgs[key][i](args[key])) {\n          throw new Error(\n            `Validation failed for ${key},should be validated by ${optionalArgs[key][i].validator}`,\n          );\n        }\n      }\n    }\n  }\n  return true;\n}\n\nexport function generateValidateObjects(validatorObject: { [x: string]: any[] }) {\n  const requiredArgs: any = {};\n  const optionalArgs: any = {};\n  for (const index in validatorObject) {\n    if (index !== undefined) {\n      const newObjectKey = index;\n      const newObjectValid = validatorObject[index][0];\n      const isRequired = validatorObject[index][1];\n      if (isRequired === AssertType.required) {\n        requiredArgs[newObjectKey] = validatorArray[newObjectValid];\n      } else {\n        optionalArgs[newObjectKey] = validatorArray[newObjectValid];\n      }\n    }\n  }\n  return { requiredArgs, optionalArgs };\n}\n\nconst assertObject = (input: any) => (target: any, key: any, descriptor: PropertyDescriptor) => {\n  const { requiredArgs, optionalArgs } = generateValidateObjects(input);\n  const original = descriptor.value;\n  function interceptor(this: any, ...args: any[]) {\n    validateArgs(args[0], requiredArgs, optionalArgs);\n    return original.apply(this, args);\n  }\n  descriptor.value = interceptor;\n  return descriptor;\n};\n\nexport { assertObject };\n","/**\n # avalanche-js-utils\n\nThis package provides a collection of utility apis for unit conversions like `fromWei`, `toWei`, `hexToNumber`, `numberToHex`, `isAddress`, etc.\n\n## Installation\n\n```\nnpm install avalanche-js-utils\n```\n\n## Usage\n\nAvailable units\n```\nconst { Units } = require('avalanche-js-utils');\n\n[Units.wei, '1'], // 1 wei\n[Units.Kwei, '1000'], // 1e3 wei\n[Units.Mwei, '1000000'], // 1e6 wei\n[Units.Gwei, '1000000000'], // 1e9 wei\n[Units.szabo, '1000000000000'], // 1e12 wei\n[Units.finney, '1000000000000000'], // 1e15 wei\n[Units.ether, '1000000000000000000'], // 1e18 wei\n[Units.avax, '1000000000000000000'], // 1e18 wei\n[Units.Kether, '1000000000000000000000'], // 1e21 wei\n[Units.Mether, '1000000000000000000000000'], // 1e24 wei\n[Units.Gether, '1000000000000000000000000000'], // 1e27 wei\n[Units.Tether, '1000000000000000000000000000000'], // 1e30 wei\n```\n\nConverting between different units\n```javascript\nconst { Units, Unit, numberToString, add0xToString, fromWei, toWei, numToStr} = require('avalanche-js-utils');\nconst { BN } = require('avalanche-js-crypto');\n\nconst avax = new Unit('1').asAVAX();\nconst avaxToGwei = avax.toGwei();\nconsole.log(avaxToGwei);\n\n// numberToString\nconst num = 123;\nconst str = numberToString(num)\nconsole.log(str);\n\n// add0xToString\nconst str = '12345';\nconst expected = add0xToString(str)\nconsole.log(expected);\n\n// fromWei\nconst Wei = new BN('1000000000000000000');\nconst expected = fromWei(Wei, Units.avax);\nconsole.log(expected);\n\n// toWei\nconst avax = new BN('1');\nconst expected = toWei(avax, hmy.utils.Units.avax);\nconst num = numToStr(expected);\nconsole.log(num);\n```\n *\n * @packageDocumentation\n * @module avalanche-utils\n */\n\nexport enum ChainType {\n  Avalanche = 'hmy',\n  Ethereum = 'eth',\n}\n\nexport enum ChainID {\n  Default = 0,\n  EthMainnet = 1,\n  Morden = 2,\n  Ropsten = 3,\n  Rinkeby = 4,\n  RootstockMainnet = 30,\n  RootstockTestnet = 31,\n  Kovan = 42,\n  EtcMainnet = 61,\n  EtcTestnet = 62,\n  Geth = 1337,\n  Ganache = 0,\n  HmyMainnet = 1,\n  HmyTestnet = 2,\n  HmyLocal = 2,\n  HmyPangaea = 3,\n}\n\n/** @hidden */\nexport const defaultConfig = {\n  Default: {\n    Chain_ID: ChainID.HmyLocal,\n    Chain_Type: ChainType.Avalanche,\n    Chain_URL: 'http://localhost:9500',\n    Network_ID: 'Local',\n  },\n  DefaultWS: {\n    Chain_ID: ChainID.HmyLocal,\n    Chain_Type: ChainType.Avalanche,\n    Chain_URL: 'ws://localhost:9800',\n    Network_ID: 'LocalWS',\n  },\n};\n\n/** @hidden */\nexport abstract class AvalancheCore {\n  chainType: ChainType;\n  chainId: ChainID;\n  constructor(chainType: ChainType, chainId: ChainID = defaultConfig.Default.Chain_ID) {\n    this.chainType = chainType;\n    this.chainId = chainId;\n  }\n  get chainPrefix(): string {\n    switch (this.chainType) {\n      case ChainType.Ethereum: {\n        return 'eth';\n      }\n      case ChainType.Avalanche: {\n        return 'hmy';\n      }\n      default: {\n        return 'hmy';\n      }\n    }\n  }\n  get getChainId(): ChainID {\n    return this.chainId;\n  }\n  public setChainId(chainId: ChainID) {\n    this.chainId = chainId;\n  }\n  public setChainType(chainType: ChainType) {\n    this.chainType = chainType;\n  }\n}\n\n/** @hidden */\nexport const HDPath = `m/44'/1023'/0'/0/`;\n\n/** @hidden */\nexport const AddressSuffix = '-';\n","/**\n * @packageDocumentation\n * @module avalanche-utils\n * @hidden\n */\n\nexport function defineReadOnly(object: any, name: string, value: any): void {\n  Object.defineProperty(object, name, {\n    enumerable: true,\n    value,\n    writable: false,\n  });\n}\n"],"names":["isKeyString","keyString","lengh","replace","match","validator","isAddress","address","isPrivateKey","privateKey","isPublicKey","publicKey","isHash","hash","isNumber","obj","isInt","Number","isInteger","isString","isBoolean","isArray","Array","isJsonString","JSON","parse","isObject","e","isFunction","isHex","Error","startsWith","parseInt","toLowerCase","isHttp","isWs","DefaultBlockParams","isBlockNumber","blockParams","earliest","pending","latest","some","val","isBech32Address","raw","isBech32TestNetAddress","isValidAddress","Units","unitMap","Map","wei","Kwei","Mwei","Gwei","szabo","finney","ether","avax","Kether","Mether","Gether","Tether","DEFAULT_OPTIONS","pad","numberToString","radix","BN","isBN","toString","numToStr","input","String","add0xToString","strip0x","numberToHex","error","hexToNumber","hex","result","substring","mul","hexToBN","toWei","unit","inputStr","baseStr","get","baseNumDecimals","length","base","isNegative","comps","split","whole","fraction","wholeBN","fractionBN","add","neg","fromWei","options","weiBN","abs","mod","matchFraction","div","Unit","str","from","Wei","asWei","asKwei","asMwei","asGwei","Szabo","asSzabo","Finney","asFinney","Ether","asEther","AVAX","asAVAX","asKether","asMether","asGether","asTether","toKwei","toGwei","toMwei","toSzabo","toFinney","toEther","toAVAX","toKether","toMether","toGether","toTether","toWeiString","toHex","AssertType","validatorArray","validateArgs","args","requiredArgs","optionalArgs","key","undefined","i","generateValidateObjects","validatorObject","index","newObjectKey","newObjectValid","isRequired","required","assertObject","target","descriptor","original","value","interceptor","apply","ChainType","ChainID","defaultConfig","Default","Chain_ID","HmyLocal","Chain_Type","Avalanche","Chain_URL","Network_ID","DefaultWS","AvalancheCore","chainType","chainId","setChainId","setChainType","Ethereum","HDPath","AddressSuffix","defineReadOnly","object","name","Object","defineProperty","enumerable","writable"],"mappings":"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"}